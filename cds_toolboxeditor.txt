# 09.09.2020: Anfang der Neuerstellung mit allen bekannten Infos.
# ~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~-~
Informationen für den Toolbox Editor des CDS

Mit dem Toolbox Editor des CDS können Datensätze, die beim EZMWF vorrätig sind, direkt auf Kosten des EZMWFs analysiert und visualisiert werden.
Der CDS stellt dabei eine eigene Dokumentation, die unter https://cds.climate.copernicus.eu/toolbox/doc/index.html zu finden. Dabei braucht man einen Account, um die Funktionen
nutzen zu können. Dieser ist kostenlos.

Im Editor wird eine Python-Umgebung verwendet. Es ist notwendig das Python Package des CDS (import cdstoolbox as ct) zu importieren. Ohne ist das Retrieval der Daten nicht möglich.
Andere Pakete, wie Cartopy, funktionieren nicht und auch andere Daten als verfügbar sind zur Zeit nicht nutzbar. Dies kann sich in Zukunft ändern, hängt aber vom 
Wohlwollen des CDS ab. Somit muss man die Syntax des CDS verwenden. Dazu gehört auch, dass man im Editor eigentlich nur Funktionen (Applications) programmiert. Diese haben mindestens
einen Input und einen Output. Der Input ist dabei der gewünschte Datensatz. Der Output kann dabei ein Bild oder der Downloadlink für den Datensatz sein.

Beispiel:

import cdstoolbox as ct
@ct.application(title='Download data')
@ct.output.download()
def download_application():
    data = ct.catalogue.retrieve(
        'reanalysis-era5-single-levels',
        {
            'product_type': 'reanalysis',
            'variable': 'total_precipitation',
            'year': '2019',
            'month': '05',
            'day': '14',
            'time': '12:00',
            'area': [
                15, -93, -70,
                -27,
            ],
        }
    )
    return data
    
Im Beispiel wird für den ERA5-Datensatz, der in stündlichen Werten im Bodenniveau vorliegt, die Totale Precipitation im Bereich mit den Eckpunkten N15°W93° und S70°W27°
für den 14.05.2019 um 12 UTC ein Downloadlink generiert und der Datensatz wäre im netCDF4-Format nutzbar. Ohne die 'area' Einschränkung wäre zudem der Niederschlag 
für die gesamte Welt verfügbar. Die Namen der Variablen können auf der Seite des Datensatzes ( 
Verzeichnis aller Datensätze: https://cds.climate.copernicus.eu/cdsapp#!/search?type=dataset
) unter dem Reiter "Download data" eingesehen werden. Dort kann man entscheiden, was man für Daten haben möchte. Neben dem netCDF4-Format steht als Standard das GRIB-Format
zur Verfügung. Beispiele sind im Ordner Scripts zu finden. 
Neben dem Downloaden kann man auch für einen Ort zum Beispiel eine Zeitreihe bilden oder CDOs oder andere Operationen anwenden und darstellen. Dabei muss wieder die Syntax
beachtet werden. In der Dokumentation finden sich alle verfügbaren Befehle. Wenn man zwei Bilder als Output haben möchte, müssen auch zwei Outputs definiert werden.
  
Beispiel:
   
import cdstoolbox as ct
layout = {
    'input_align': 'top'
}
extent = {
    'Europe': [-11, 35, 34, 60],
    'Arctic': [-180, 180, 70, 90],
    'Mediterranean': [-6, 34, 31, 45],
    'Global': [-180, 180, -90, 90]
}
@ct.application(title='Calculate trends', layout=layout)
@ct.input.dropdown('region', label='Region', values=['Europe', 'Arctic', 'Mediterranean', 'Global'],
                   description='Map will change accordingly.')
@ct.output.figure()
@ct.output.figure()
def trend_app(region):
    """
    Application main steps:
    - retrieve a variable over a defined time range
    - compute the monthly mean
    - select a region
    - compute the linear trend in time for each gridpoint in that region
    - plot trends and their standard errors on two separate maps
    """
    data = ct.catalogue.retrieve(
        'reanalysis-era5-single-levels',
        {
            'variable': '2m_temperature',
            'grid': ['3', '3'],
            'product_type': 'reanalysis',
            'year': [
                '2008', '2009', '2010',
                '2011', '2012', '2013',
                '2014', '2015', '2016',
                '2017'
            ],
            'month': [
                '01', '02', '03', '04', '05', '06',
                '07', '08', '09', '10', '11', '12'
            ],
            'day': [
                '01', '02', '03', '04', '05', '06',
                '07', '08', '09', '10', '11', '12',
                '13', '14', '15', '16', '17', '18',
                '19', '20', '21', '22', '23', '24',
                '25', '26', '27', '28', '29', '30',
                '31'
            ],
            'time': ['00:00', '06:00', '12:00', '18:00'],
        }
    )
    data_mean = ct.climate.monthly_mean(data)
    data_select = ct.cube.select(data_mean, extent=extent[region])
    a, b, a_std, b_std = ct.stats.trend(
        data_select, slope_units='K year-1')
    projection = ct.cdsplot.crs.NorthPolarStereo() if region == 'Arctic' else ct.cdsplot.crs.PlateCarree()
    fig_b = ct.cdsplot.geomap(
        b,
        projection=projection,
        pcolormesh_kwargs={'cmap': 'coolwarm'},
        title='Near Surface Air Temperature Trend'
    )
    fig_std = ct.cdsplot.geomap(
        b_std,
        projection=projection,
        pcolormesh_kwargs={'cmap': 'coolwarm'},
        title='Near Surface Air Temperature Trend\nStandard deviation'
    )
    return fig_b, fig_std

In diesem Beispiel werden für die Region, die im Dropdown-Menü gewählt wird, der Near Surface Air Temperature Trend sowie die Standardabweichung des Trends auf Grundlage
von ERA5 Daten ausgerechnet und dargestellt. Man sieht im Retrieval des Datensatzes, dass das Grid auf 3° x 3° gesetzt wurde. Ohne diese Option ist es ein 0.25° x 0.25° Grid.
Trotz der vielfältigen Möglichkeiten muss hier eine neue Syntax angelernt werden, da Plotting-Pakete wie cartopy hier nicht funktionieren. 
